{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"MoveIt - an HackaGame game MoveIt est a un jeu vid\u00e9o imagin\u00e9 sur un aspect p\u00e9dagogique pour le challenge de d\u00e9velopper des joueurs IA. Il s'articule autour du probl\u00e8me de chemins multiagent ( Multi-agent pathfinding ). Cependant, au-del\u00e0 du probl\u00e8me d\u2019\u00e9vitement de collision le but est: Deprendre en charge des missions al\u00e9atoires, Avec des \u00e9quipes en concurrence sur le terrain Avec des Vips \u00e0 \u00e9viter absolument. MoveIt est acc\u00e9ssible via son repo-git , merci \u00e0 github pour ce service. Briques technologiques Pour ce faire MoveIt s'appuie sur HackaGames une libraire modeste bas\u00e9e sur ZeroMQ pour s\u00e9parer le processus du jeu (le ma\u00eetre du jeu) et les joueurs autonomes ( Bot ). [ZeroMG] se veux \u00eatre une An open-source universal messaging library . Par universel, il faut entendre Connecting your code in any language, on any platform . Cependant, aujourd\u2019hui HackaGames est d\u00e9velopp\u00e9 exclusivement sous Python3 . Objectifs Mises-en oeuvre de techniques d'optimisation combinatoire et d'Intelligence Artificielle. Conduire un projet de fa\u00e7on it\u00e9ratif. Travailler en \u00e9quipes. Int\u00e9grer de bonne pratique de d\u00e9veloppement de projet informatique (versionning, tests, documentation).","title":"Home"},{"location":"#moveit-an-hackagame-game","text":"MoveIt est a un jeu vid\u00e9o imagin\u00e9 sur un aspect p\u00e9dagogique pour le challenge de d\u00e9velopper des joueurs IA. Il s'articule autour du probl\u00e8me de chemins multiagent ( Multi-agent pathfinding ). Cependant, au-del\u00e0 du probl\u00e8me d\u2019\u00e9vitement de collision le but est: Deprendre en charge des missions al\u00e9atoires, Avec des \u00e9quipes en concurrence sur le terrain Avec des Vips \u00e0 \u00e9viter absolument. MoveIt est acc\u00e9ssible via son repo-git , merci \u00e0 github pour ce service.","title":"MoveIt - an HackaGame game"},{"location":"#briques-technologiques","text":"Pour ce faire MoveIt s'appuie sur HackaGames une libraire modeste bas\u00e9e sur ZeroMQ pour s\u00e9parer le processus du jeu (le ma\u00eetre du jeu) et les joueurs autonomes ( Bot ). [ZeroMG] se veux \u00eatre une An open-source universal messaging library . Par universel, il faut entendre Connecting your code in any language, on any platform . Cependant, aujourd\u2019hui HackaGames est d\u00e9velopp\u00e9 exclusivement sous Python3 .","title":"Briques technologiques"},{"location":"#objectifs","text":"Mises-en oeuvre de techniques d'optimisation combinatoire et d'Intelligence Artificielle. Conduire un projet de fa\u00e7on it\u00e9ratif. Travailler en \u00e9quipes. Int\u00e9grer de bonne pratique de d\u00e9veloppement de projet informatique (versionning, tests, documentation).","title":"Objectifs"},{"location":"bots/","text":"First Autonomous Player (Bot) MoveIt est bas\u00e9 sur HackaGames . Se r\u00e9f\u00e9rer \u00e0 cette solution pour la philosophie du moteur de jeu, et des \u00e9change entre le Maitre de jeu et les joueurs. Documentation de HackaGames : ktorz-net.github.io/hackagames/ Squelette de joueur: MoveIt se structure comme tout jeu HackaGames avec un cycle global enclanch\u00e9 pour une partie: wakeUp en d\u00e9but de partie et sleep en fin de partie, et un cycle rapide de tour de jeu avec perceive et decide . class MyBot(): # Player interface : def wakeUp(self, playerId, numberOfPlayers, gameConfiguration ): ... def perceive(self, state ): ... def decide(self): return \"pass\" def sleep(self, result): print( f\"end on : {result}\" ) Le MoveIt model:","title":"Bot player"},{"location":"bots/#first-autonomous-player-bot","text":"MoveIt est bas\u00e9 sur HackaGames . Se r\u00e9f\u00e9rer \u00e0 cette solution pour la philosophie du moteur de jeu, et des \u00e9change entre le Maitre de jeu et les joueurs. Documentation de HackaGames : ktorz-net.github.io/hackagames/","title":"First Autonomous Player (Bot)"},{"location":"bots/#squelette-de-joueur","text":"MoveIt se structure comme tout jeu HackaGames avec un cycle global enclanch\u00e9 pour une partie: wakeUp en d\u00e9but de partie et sleep en fin de partie, et un cycle rapide de tour de jeu avec perceive et decide . class MyBot(): # Player interface : def wakeUp(self, playerId, numberOfPlayers, gameConfiguration ): ... def perceive(self, state ): ... def decide(self): return \"pass\" def sleep(self, result): print( f\"end on : {result}\" ) Le","title":"Squelette de joueur:"},{"location":"bots/#moveit-model","text":"","title":"MoveIt model:"},{"location":"rules/","text":"R\u00e9gles du jeux MoveIt consiste donc \u00e0 d\u00e9placer des robots dans une carte pour r\u00e9alis\u00e9r des missions. Un randu visuel est propos\u00e9 \u00e0 l'aide de la librairie graphique Cairo . Ci appr\u00e9s une capture d'\u00e9crant du jeux: On peu y voir 3 robots rouges ( R-1 , R-2 et R-3 ) pouvant se d\u00e9placer sur un graphe compos\u00e9 de 48 cellules/dalles ( tiles en anglais) Un Market-Place propose des missions \u00e0 r\u00e9aliser par les robots. Jouer: Nous supposons ici que vous avais clonez MoveIt et que vous l'avez install\u00e9 sur votre machine. Le r\u00e9pertoire play contiend un certaint nombre de scripts ( \\(2\\) pour l'instant), permetant de lancer MoveIT dans diff\u00e9rente configuration dans un mode interactif. Vous, humain, jouez au jeu en envoyant vos commands dans le terminal. Lancer le jeu dans son mode le plus basic: python3 ./game-moveit/play/debug.py Une repr\u00e9sentation du jeux est mise \u00e0 jour \u00e0 chaque pas-de-temps dans ./shot-moveIt.png pour avoir une id\u00e9e de l'\u00e9tat du jeu est prendre les bonnes d\u00e9cisions. Les d\u00e9cisions consernent en premier lieu les d\u00e9placement des robots et se code de la pa\u00e7on suivante: move iRobot direction . Chaque robot donc est identifi\u00e9 par un num\u00e9ro de \\(1\\) \u00e0 \\(n\\) avec \\(n\\) robots. La direction est cod\u00e9 sur une logique horaire ( Clock Bearing ). Le robot peut se d\u00e9pacer \u00e0 midi, 3 heure, 6 heure ou 9 heure. Par exemple avec trois robots: move 1 9 2 12 3 3 Cet commande indique que le robot-1 bouge dans la direction 9H, le robot-2 vers 12h et le robot-3 vers 3H. Une direction \\(0h\\) indiquera que le rbots reste sur sa position (action par d\u00e9fault). Les robots peuvent r\u00e9aliser une mission, soit pour la d\u00e9buter, soit pour la finaliser. Dans ce cadre, le robot doit \u00eatre sur la bonne possition pour faire une action mission : mission iRobot iMission . iMission est l'identifiant de la mission \u00e0 activer ou a finaliser entre \\(1\\) et \\(m\\) avec \\(m\\) missions sur le jeu. L'example suivant indique que le robot-2 active la mission 8 . mission 2 8 L'\u00e9quipe de robot \u00e0 un nombre de tours (tic) limit\u00e9 pour r\u00e9aliser un maximun de mission. Aussi, il est pr\u00e9f\u00e9rable de faire des missione en m\u00eame temps que des d\u00e9placements, par exemple: mission 2 8 move 1 0 3 12 Pour un version plus riche du jeu: python3 ./game-moveit/play/moveIt.py Version multi-joueur","title":"Game Rules"},{"location":"rules/#regles-du-jeux","text":"MoveIt consiste donc \u00e0 d\u00e9placer des robots dans une carte pour r\u00e9alis\u00e9r des missions. Un randu visuel est propos\u00e9 \u00e0 l'aide de la librairie graphique Cairo . Ci appr\u00e9s une capture d'\u00e9crant du jeux: On peu y voir 3 robots rouges ( R-1 , R-2 et R-3 ) pouvant se d\u00e9placer sur un graphe compos\u00e9 de 48 cellules/dalles ( tiles en anglais) Un Market-Place propose des missions \u00e0 r\u00e9aliser par les robots.","title":"R\u00e9gles du jeux"},{"location":"rules/#jouer","text":"Nous supposons ici que vous avais clonez MoveIt et que vous l'avez install\u00e9 sur votre machine. Le r\u00e9pertoire play contiend un certaint nombre de scripts ( \\(2\\) pour l'instant), permetant de lancer MoveIT dans diff\u00e9rente configuration dans un mode interactif. Vous, humain, jouez au jeu en envoyant vos commands dans le terminal. Lancer le jeu dans son mode le plus basic: python3 ./game-moveit/play/debug.py Une repr\u00e9sentation du jeux est mise \u00e0 jour \u00e0 chaque pas-de-temps dans ./shot-moveIt.png pour avoir une id\u00e9e de l'\u00e9tat du jeu est prendre les bonnes d\u00e9cisions. Les d\u00e9cisions consernent en premier lieu les d\u00e9placement des robots et se code de la pa\u00e7on suivante: move iRobot direction . Chaque robot donc est identifi\u00e9 par un num\u00e9ro de \\(1\\) \u00e0 \\(n\\) avec \\(n\\) robots. La direction est cod\u00e9 sur une logique horaire ( Clock Bearing ). Le robot peut se d\u00e9pacer \u00e0 midi, 3 heure, 6 heure ou 9 heure. Par exemple avec trois robots: move 1 9 2 12 3 3 Cet commande indique que le robot-1 bouge dans la direction 9H, le robot-2 vers 12h et le robot-3 vers 3H. Une direction \\(0h\\) indiquera que le rbots reste sur sa position (action par d\u00e9fault). Les robots peuvent r\u00e9aliser une mission, soit pour la d\u00e9buter, soit pour la finaliser. Dans ce cadre, le robot doit \u00eatre sur la bonne possition pour faire une action mission : mission iRobot iMission . iMission est l'identifiant de la mission \u00e0 activer ou a finaliser entre \\(1\\) et \\(m\\) avec \\(m\\) missions sur le jeu. L'example suivant indique que le robot-2 active la mission 8 . mission 2 8 L'\u00e9quipe de robot \u00e0 un nombre de tours (tic) limit\u00e9 pour r\u00e9aliser un maximun de mission. Aussi, il est pr\u00e9f\u00e9rable de faire des missione en m\u00eame temps que des d\u00e9placements, par exemple: mission 2 8 move 1 0 3 12 Pour un version plus riche du jeu: python3 ./game-moveit/play/moveIt.py","title":"Jouer:"},{"location":"rules/#version-multi-joueur","text":"","title":"Version multi-joueur"}]}